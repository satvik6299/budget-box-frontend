{"version":3,"sources":["../src/Page.js"],"names":["Page","parent","type","displayName","props","slot","sections","i","c","length","Object","assign","getSections","name","layout","context","getLayout","children","createElement","Error","contextTypes","func","isRequired"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;IAEMA,I;;;;;;;;;;;gCAWQC,M,EAAQ;AAClB,UAAI,sBAAcA,MAAd,CAAJ,EAA2B;AACzB;AACA,YAAIA,OAAOC,IAAP,IAAeD,OAAOC,IAAP,CAAYC,WAAZ,KAA4B,SAA/C,EAA0D;AACxD,qCAAUF,OAAOG,KAAP,CAAaC,IAAvB,EAA8BJ,MAA9B;AACD;AACD,eAAO,EAAP;AACD,OAND,MAMO,IAAI,sBAAQA,MAAR,CAAJ,EAAqB;AAC1B,YAAIK,WAAW,EAAf;AACA,aAAK,IAAIC,IAAI,CAAR,EAAWC,IAAIP,OAAOQ,MAA3B,EAAmCF,IAAIC,CAAvC,EAA0CD,KAAK,CAA/C,EAAkD;AAChDD,qBAAWI,OAAOC,MAAP,CAAc,EAAd,EAAkBL,QAAlB,EAA4B,KAAKM,WAAL,CAAiBX,OAAOM,CAAP,CAAjB,CAA5B,CAAX;AACD;AACD,eAAOD,QAAP;AACD;AACD,aAAO,EAAP;AACD;;;8BAESO,I,EAAM;AACd,UAAMC,SAAS,KAAKC,OAAL,CAAaC,SAAb,CAAuBH,IAAvB,CAAf;AACA,UAAMI,WAAW,KAAKb,KAAL,CAAWa,QAA5B;AACA,UAAMb,qBAAa,KAAKA,KAAlB,CAAN;AACA,aAAOA,MAAMU,MAAb;AACA,aAAOV,MAAMa,QAAb;AACA,aAAO,gBAAMC,aAAN,CAAoBJ,MAApB,EAA4BV,KAA5B,EAAmCa,QAAnC,CAAP;AACD;;;6BAEQ;AACP,UAAMH,SAAS,KAAKE,SAAL,CAAe,KAAKZ,KAAL,CAAWU,MAA1B,CAAf;AACA,UAAMR,WAAW,KAAKM,WAAL,CAAiB,KAAKR,KAAL,CAAWa,QAA5B,CAAjB;;AAEA,UAAI,CAACH,MAAL,EAAa;AACX,cAAM,IAAIK,KAAJ,+BAAqC,KAAKf,KAAL,CAAWU,MAAhD,QAAN;AACD;;AAED,aACE;AAAA;AAAA,UAAe,UAAUR,QAAzB;AACGQ;AADH,OADF;AAKD;;;;;;AAlDGd,I,CAOGoB,Y,GAAe;AACpBJ,aAAW,oBAAUK,IAAV,CAAeC;AADN,C;kBA+CTtB,I","file":"Page.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport isPlainObject from 'lodash.isplainobject';\nimport isArray from 'lodash.isarray';\nimport Section from './Section';\nimport LayoutContext from './LayoutContext';\n\nclass Page extends PureComponent {\n\n  static propTypes = {\n    layout: PropTypes.string.isRequired,\n    children: PropTypes.node.isRequired,\n  };\n\n  static contextTypes = {\n    getLayout: PropTypes.func.isRequired,\n  };\n\n  getSections(parent) {\n    if (isPlainObject(parent)) {\n      // Check if the element is a section\n      if (parent.type && parent.type.displayName === 'Section') {\n        return { [parent.props.slot]: parent };\n      }\n      return {};\n    } else if (isArray(parent)) {\n      let sections = [];\n      for (let i = 0, c = parent.length; i < c; i += 1) {\n        sections = Object.assign({}, sections, this.getSections(parent[i]));\n      }\n      return sections;\n    }\n    return {};\n  }\n\n  getLayout(name) {\n    const layout = this.context.getLayout(name);\n    const children = this.props.children;\n    const props = { ...this.props };\n    delete props.layout;\n    delete props.children;\n    return React.createElement(layout, props, children);\n  }\n\n  render() {\n    const layout = this.getLayout(this.props.layout);\n    const sections = this.getSections(this.props.children);\n\n    if (!layout) {\n      throw new Error(`No layout found named: '${this.props.layout}'`);\n    }\n\n    return (\n      <LayoutContext sections={sections}>\n        {layout}\n      </LayoutContext>\n    );\n  }\n\n}\n\nexport default Page;\n"]}